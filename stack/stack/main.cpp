#include <iostream>
#include <vector>
#include <deque>
#include <list>
#include <stack>    //директива для подключения стека

using namespace std;

//Stack в STL (адаптеры контейнеров: стек, дек и очередь с приоритетом)

//адаптер контейнера означает то, что его можно наложить поверх основного контейнера и он будет работать по-разному в зависимости от положенного в основу контейнера

int main() {
    setlocale(LC_ALL, "RU");
    
    stack<int> st;
    
    //чтобы изменить контейнер, который будет лежать в основе адаптера контейнера делаем следующее:
    stack<int, list<int>> st1;    //через запятую после указания типа данных указываем тип контейнера, который будем использовать 
    
    auto a = st.__get_container();    //в переменную a вернется deque типа int (если мы не указываем ничего конкретного, что будет использовать контейнер он по умолчанию использует deque)
    
    st.push(2);        //элементы помещаются в том порядке, в каком мы их добавляем (создает копию объекта и добавляет в стек
    st.emplace(9);      //сразу создает элемент в стек
    
    st.pop();     //извлечение последнего добавленного элемента в стек
    
    st.top();    //возвращает ссылку на самый "верхний" элемент стека
    
    st.push(43);
    st.push(3);
    
    cout << a[2] << endl;     // теперь с помощью a можно обходить ограничения стека
    
    while(!st.empty()){    //пока не пусто
        cout << st.top() << endl;    //выводим верхний
        st.pop();   //убираем его и соотвественно дальше идем к следующему
    }
    
    return 0;
}


//особенность стека: можно получить доступ только к "верхнему" элементу

//со стеком не работают итераторы

//стек - по сути оболочка, которая ограничивает дек своими собственными методами и особенностями
