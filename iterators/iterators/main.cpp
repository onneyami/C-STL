#include <iostream>
#include <vector>

using namespace std;

//итераторы

int main() {
    setlocale(LC_ALL, "RU");
    
    vector<int> myVector = {1, 9, 44, 422, 676, 78};
    
    vector<int>::iterator it;    //создание итератора для работы с вектором, описанным выше с именем it
    
    it = myVector.begin();   //поставили итератор на начало вектора myVector
    
    cout << *it << endl;     //вывод первого элемента с вектора, чтобы выводить итератор нужно его разыменовать, так как для него нет перегрузки <<
    
    *it = 1000;    //по тому адресу в памяти, где хранится 1 теперь будет 1000, итератор также нужно разыменовать
    
    it++;    //переход итератора на следующий элемент в векторе
    
    it+=3;    //переход итератора еще на 3 элемента вперед
    
    it-=1;    //переход итератора на 1 элемент назад
    
    for(vector<int>::iterator i = myVector.begin(); i != myVector.end(); i++){   //метод end() возвращает итератор, указывающий на последний элемент вектора
        cout << *it << endl;
    }
    //если нужно итерироватья в обратном порядке, то всё тоже самое, только наоборот и с использованием reverse_iterator, rend() и rbegin()
    
    for(vector<int>::reverse_iterator i = myVector.rend(); i != myVector.rbegin(); i--){
        cout << *it << endl;
    }
    
    advance(it, 3);    //сдвигает итератор на какое-либо число, в нашем случае на 3
    
    myVector.insert(it, 999);    //помещает в вектор в адрес итератора какой-либо элемент
    myVector.erase(it, it+3);          //удаляет элемент по адресу итератора в векторе, либо может удалять все элементы в диапазоне от одного итератора до другого, как у нас
    
    return 0;
}

//если нужно использовать итератор ТОЛЬКО для чтения, то используем const_iterator, cbegin(), cend()


